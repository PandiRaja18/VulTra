import * as vscode from 'vscode';
import * as path from 'path';
import { AnalysisResult } from '../types';

export class VulnerabilityPanel {
    private static instance: VulnerabilityPanel | null = null;
    private static currentPanel: vscode.WebviewPanel | null = null;
    private _results: Map<string, AnalysisResult> = new Map();
    private _aiSuggestions: Map<string, any> = new Map();

     static{
             VulnerabilityPanel.currentPanel = vscode.window.createWebviewPanel(
            'javaVulnerabilityResults',
            '🛡️ Zacksaw',
            vscode.ViewColumn.Two,
            {
                enableScripts: true,
                retainContextWhenHidden: true
            }
        );
    }
    private constructor() {
        console.log('🏗️ Vulnerability panel instance created');
        if (VulnerabilityPanel.currentPanel) {
            VulnerabilityPanel.currentPanel.webview.onDidReceiveMessage((message: any) => {
                switch (message.command) {
                    case 'openFile':
                        this.openFileAtLine(message.fileName, message.lineNumber);
                        break;
                    case 'applyAISuggestion':
                        this.applyAISuggestion(message.suggestionId);
                        break;
                    case 'generateAISuggestion':
                        this.generateAISuggestion(message.fileName, message.lineNumber);
                        break;
                }
            });
        }
    }

    public static createOrShow(): VulnerabilityPanel {
        if (!VulnerabilityPanel.instance) {
            VulnerabilityPanel.instance = new VulnerabilityPanel();
        }
        return VulnerabilityPanel.instance;
    }

    public addResult(result: AnalysisResult): void {
        this._results.set(result.fileName, result);
        console.log(`📊 Added analysis result for ${path.basename(result.fileName)}`);
        
        if (VulnerabilityPanel.currentPanel) {
            this.refreshPanel();
        }
    }

    public addAISuggestions(suggestions: any[]): void {
        suggestions.forEach(suggestion => {
            const key = `${suggestion.fileName}:${suggestion.lineNumber}`;
            this._aiSuggestions.set(key, suggestion);
        });
        
        if (VulnerabilityPanel.currentPanel) {
            this.refreshPanel();
        }
    }

    public updateResults(results: AnalysisResult[]): void {
        this._results.clear();
        results.forEach(result => {
            this._results.set(result.fileName, result);
        });
        console.log(`📊 Updated with ${results.length} analysis results`);
        
        if (VulnerabilityPanel.currentPanel) {
            this.refreshPanel();
        }
    }

    public removeResult(fileName: string): void {
        if (this._results.delete(fileName)) {
            console.log(`🗑️ Removed result for ${path.basename(fileName)}`);
            
            // Auto-refresh the panel if it's visible
            if (VulnerabilityPanel.currentPanel) {
                this.refreshPanel();
            }
        }
    }

    public showResults(): void {
        this.createOrUpdatePanel();
    }

    private createOrUpdatePanel(): void {
        if (VulnerabilityPanel.currentPanel) {
            this.refreshPanel();
            VulnerabilityPanel.currentPanel.reveal();
            return;
        }

        VulnerabilityPanel.currentPanel = vscode.window.createWebviewPanel(
            'javaVulnerabilityResults',
            '🛡️ Zacksaw',
            vscode.ViewColumn.Two,
            {
                enableScripts: true,
                retainContextWhenHidden: true
            }
        );

        VulnerabilityPanel.currentPanel.onDidDispose(() => {
            VulnerabilityPanel.currentPanel = null;
            console.log('🛑 Vulnerability panel disposed');
        });

        VulnerabilityPanel.currentPanel.webview.onDidReceiveMessage((message: any) => {
            switch (message.command) {
                case 'openFile':
                    this.openFileAtLine(message.fileName, message.lineNumber);
                    break;
                case 'applyAISuggestion':
                    this.applyAISuggestion(message.suggestionId);
                    break;
                case 'generateAISuggestion':
                    this.generateAISuggestion(message.fileName, message.lineNumber);
                    break;
            }
        });

        this.refreshPanel();
        console.log('📋 Vulnerability panel created and shown');
    }

    private refreshPanel(): void {
        if (!VulnerabilityPanel.currentPanel) {
            return;
        }

        const totalIssues = Array.from(this._results.values())
            .reduce((sum, result) => sum + result.issues.length, 0);

        VulnerabilityPanel.currentPanel.webview.html = this.generateHTML(totalIssues);
    }

    private generateHTML(totalIssues: number): string {
        const resultsHtml = this._generateContinuousResultsHtml();

        return `<!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Java Vulnerability Analysis Results</title>
            <style>
                * {
                    box-sizing: border-box;
                    margin: 0;
                    padding: 0;
                }

                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
                    line-height: 1.6;
                    color: #ffffff;
                    background-color: #1e1e1e;
                    height: 100vh;
                    overflow-y: auto;
                }
                
                .container {
                    width: 100%;
                    height: 100vh;
                    background-color: #1e1e1e;
                    position: relative;
                    display: flex;
                    flex-direction: column;
                }
                
                /* Custom resize handle */
                .resize-handle {
                    position: absolute;
                    top: 0;
                    left: 0;
                    width: 5px;
                    height: 100%;
                    background: #404040;
                    cursor: col-resize;
                    opacity: 0;
                    transition: opacity 0.2s ease;
                    z-index: 1000;
                }
                
                .container:hover .resize-handle {
                    opacity: 1;
                }
                
                .resize-handle:hover {
                    background: #555;
                    opacity: 1;
                }
                
                .content-wrapper {
                    flex: 1;
                    overflow-y: auto;
                    padding-left: 5px;
                }
                
                .header {
                    background: linear-gradient(135deg, #4a90e2 0%, #357abd 100%);
                    color: white;
                    padding: 15px 20px;
                    text-align: center;
                    border-bottom: 2px solid #333;
                    position: sticky;
                    top: 0;
                    z-index: 100;
                }
                
                .header h1 {
                    font-size: 1.3em;
                    font-weight: 600;
                    margin: 0;
                }
                
                .header p {
                    margin: 5px 0 0 0;
                    font-size: 0.85em;
                    opacity: 0.9;
                }
                
                .summary {
                    background: #2d2d2d;
                    padding: 12px 20px;
                    border-bottom: 1px solid #404040;
                    color: #ffffff;
                    position: sticky;
                    top: 73px;
                    z-index: 99;
                }
                
                .summary h2 {
                    margin: 0 0 5px 0;
                    font-size: 1em;
                    font-weight: 600;
                    color: #ffffff;
                }
                
                .summary-text {
                    font-size: 0.9em;
                    font-weight: bold;
                    color: #ffffff;
                }
                
                .file-section {
                    border-bottom: 1px solid #404040;
                }
                
                .file-header {
                    background-color: #2d2d2d;
                    color: #ffffff;
                    padding: 10px 20px;
                    font-weight: 600;
                    font-size: 0.95em;
                    border-bottom: 1px solid #404040;
                    display: flex;
                    align-items: center;
                    position: sticky;
                    top: 125px;
                    z-index: 98;
                }
                
                .file-icon {
                    margin-right: 8px;
                    font-size: 1em;
                }
                
                .issue {
                    background: #1e1e1e;
                    padding: 15px 20px;
                    border-bottom: 1px solid #333;
                    cursor: pointer;
                    transition: background-color 0.2s ease;
                    position: relative;
                }
                
                .issue:hover {
                    background-color: #252525;
                }
                
                .issue:last-child {
                    border-bottom: none;
                }
                
                .severity-high { 
                    border-left: 4px solid #e74c3c;
                }
                .severity-medium { 
                    border-left: 4px solid #f39c12;
                }
                .severity-low { 
                    border-left: 4px solid #3498db;
                }
                
                .issue-header {
                    display: flex;
                    align-items: center;
                    margin-bottom: 8px;
                }
                
                .severity-icon {
                    margin-right: 8px;
                    font-size: 1em;
                }
                
                .line-number {
                    color: #888;
                    font-size: 0.85em;
                    font-weight: 500;
                    margin-right: 12px;
                }
                
                .description {
                    color: #ffffff;
                    font-size: 0.95em;
                    margin-bottom: 8px;
                    line-height: 1.4;
                }
                
                .suggested-fix {
                    background-color: #ffffff;
                    color: #666666;
                    padding: 10px 12px;
                    border-radius: 4px;
                    font-style: italic;
                    font-size: 0.9em;
                    border-left: 3px solid #27ae60;
                    margin-top: 8px;
                    margin-bottom: 8px;
                }
                
                /* AI Suggestion Styles */
                .ai-suggestion {
                    background: linear-gradient(135deg, #1a3d1a 0%, #2d4a2d 100%);
                    border: 1px solid #27ae60;
                    border-radius: 6px;
                    padding: 12px;
                    margin-top: 10px;
                    position: relative;
                }
                
                .ai-suggestion-header {
                    display: flex;
                    align-items: center;
                    justify-content: space-between;
                    margin-bottom: 8px;
                }
                
                .ai-suggestion-title {
                    color: #27ae60;
                    font-weight: 600;
                    font-size: 0.9em;
                    display: flex;
                    align-items: center;
                }
                
                .ai-suggestion-title .bulb {
                    margin-right: 6px;
                    font-size: 1.1em;
                }
                
                .ai-code {
                    background: #1a1a1a;
                    border: 1px solid #404040;
                    border-radius: 4px;
                    padding: 10px;
                    margin: 8px 0;
                    font-family: 'Courier New', Consolas, 'Monaco', monospace;
                    font-size: 0.85em;
                    color: #f8f8f2;
                    overflow-x: auto;
                    white-space: pre-wrap;
                    word-wrap: break-word;
                    max-height: 200px;
                    overflow-y: auto;
                }
                
                .ai-actions {
                    display: flex;
                    gap: 8px;
                    margin-top: 8px;
                    flex-wrap: wrap;
                }
                
                .ai-button {
                    padding: 6px 12px;
                    border: none;
                    border-radius: 4px;
                    cursor: pointer;
                    font-size: 0.8em;
                    font-weight: 500;
                    transition: all 0.2s ease;
                    background: #4a90e2;
                    color: white;
                    outline: none;
                }
                
                .ai-button:hover {
                    transform: translateY(-1px);
                    box-shadow: 0 2px 4px rgba(0,0,0,0.3);
                }
                
                .ai-button:active {
                    transform: translateY(0);
                }
                
                .apply-btn {
                    background: #27ae60;
                }
                
                .apply-btn:hover {
                    background: #229954;
                }
                
                .generate-btn {
                    background: #4a90e2;
                }
                
                .generate-btn:hover {
                    background: #357abd;
                }
                
                .ai-button:disabled {
                    opacity: 0.6;
                    cursor: not-allowed;
                    transform: none;
                }
                
                .loading-suggestion {
                    background: #2d2d2d;
                    border: 1px solid #555;
                    border-radius: 6px;
                    padding: 12px;
                    margin-top: 10px;
                    text-align: center;
                    color: #888;
                    font-style: italic;
                }
                
                .no-issues {
                    text-align: center;
                    color: #90ee90;
                    padding: 60px 20px;
                    font-size: 1.2em;
                    background: #1e1e1e;
                    flex: 1;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                }
                
                .issue-count {
                    color: #888;
                    font-size: 0.85em;
                    font-weight: normal;
                }
                
                /* Custom scrollbar without webkit */
                .content-wrapper {
                    scrollbar-width: thin;
                    scrollbar-color: #404040 #1e1e1e;
                }
                
                .ai-code {
                    scrollbar-width: thin;
                    scrollbar-color: #404040 #1a1a1a;
                }
                
                /* Fallback for browsers that don't support scrollbar-color */
                .content-wrapper::-moz-scrollbar {
                    width: 8px;
                }
                
                .content-wrapper::-moz-scrollbar-track {
                    background: #1e1e1e;
                }
                
                .content-wrapper::-moz-scrollbar-thumb {
                    background: #404040;
                    border-radius: 4px;
                }
                
                /* Responsive design */
                @media (max-width: 600px) {
                    .header h1 {
                        font-size: 1.1em;
                    }
                    
                    .issue {
                        padding: 12px 15px;
                    }
                    
                    .ai-actions {
                        flex-direction: column;
                    }
                    
                    .ai-button {
                        width: 100%;
                        margin-bottom: 4px;
                    }
                    
                    .resize-handle {
                        display: none;
                    }
                }
                
                /* Focus styles for accessibility */
                .ai-button:focus {
                    outline: 2px solid #4a90e2;
                    outline-offset: 2px;
                }
                
                .issue:focus {
                    outline: 2px solid #4a90e2;
                    outline-offset: -2px;
                }
                
                /* Animation for loading states */
                @keyframes spin {
                    0% { transform: rotate(0deg); }
                    100% { transform: rotate(360deg); }
                }
                
                .loading {
                    animation: spin 1s linear infinite;
                }
            </style>
        </head>
        <body>
            <div class="container" id="mainContainer">
                <div class="resize-handle" id="resizeHandle"></div>
                
                <div class="content-wrapper">
                    <div class="header">
                        <h1>🛡️ Zacksaw</h1>
                        <p>Intelligent Security Analysis with AI Suggestions</p>
                    </div>
                    
                    <div class="summary">
                        <h2>📊 Analysis Summary</h2>
                        <div class="summary-text">
                            Total Issues Found: <strong>${totalIssues}</strong> across <strong>${this._results.size}</strong> file(s)
                        </div>
                    </div>

                    ${totalIssues === 0 ? 
                        '<div class="no-issues">✅ No vulnerabilities detected in the analyzed files!</div>' : 
                        resultsHtml
                    }
                </div>
            </div>

            <script>
                const vscode = acquireVsCodeApi();
                
                function openFile(fileName, lineNumber) {
                    vscode.postMessage({
                        command: 'openFile',
                        fileName: fileName,
                        lineNumber: lineNumber
                    });
                }
                
                function applyAISuggestion(suggestionId) {
                    vscode.postMessage({
                        command: 'applyAISuggestion',
                        suggestionId: suggestionId
                    });
                }
                
                function generateAISuggestion(fileName, lineNumber) {
                    const button = event.target;
                    const originalText = button.textContent;
                    
                    button.innerHTML = '🔄 <span class="loading">⟳</span> Generating...';
                    button.disabled = true;
                    
                    vscode.postMessage({
                        command: 'generateAISuggestion',
                        fileName: fileName,
                        lineNumber: lineNumber
                    });
                    
                    setTimeout(() => {
                        if (button.disabled) {
                            button.textContent = originalText;
                            button.disabled = false;
                        }
                    }, 10000);
                }
                
                // Panel resizing functionality without webkit
                (function initializeResize() {
                    let isResizing = false;
                    let startX = 0;
                    let startWidth = 0;
                    
                    const resizeHandle = document.getElementById('resizeHandle');
                    const container = document.getElementById('mainContainer');
                    
                    if (!resizeHandle || !container) return;
                    
                    resizeHandle.addEventListener('mousedown', function(e) {
                        isResizing = true;
                        startX = e.clientX;
                        startWidth = parseInt(document.defaultView.getComputedStyle(container).width, 10);
                        
                        document.addEventListener('mousemove', handleMouseMove);
                        document.addEventListener('mouseup', handleMouseUp);
                        
                        // Prevent text selection during resize
                        document.body.style.userSelect = 'none';
                        container.style.pointerEvents = 'none';
                    });
                    
                    function handleMouseMove(e) {
                        if (!isResizing) return;
                        
                        const width = startWidth + (e.clientX - startX);
                        
                        // Constrain width between reasonable bounds
                        if (width >= 200 && width <= window.innerWidth - 100) {
                            container.style.width = width + 'px';
                        }
                    }
                    
                    function handleMouseUp() {
                        isResizing = false;
                        document.removeEventListener('mousemove', handleMouseMove);
                        document.removeEventListener('mouseup', handleMouseUp);
                        
                        // Restore normal behavior
                        document.body.style.userSelect = '';
                        container.style.pointerEvents = '';
                    }
                    
                    // Touch support for mobile
                    resizeHandle.addEventListener('touchstart', function(e) {
                        isResizing = true;
                        startX = e.touches[0].clientX;
                        startWidth = parseInt(document.defaultView.getComputedStyle(container).width, 10);
                    });
                    
                    document.addEventListener('touchmove', function(e) {
                        if (!isResizing) return;
                        e.preventDefault();
                        
                        const width = startWidth + (e.touches[0].clientX - startX);
                        
                        if (width >= 200 && width <= window.innerWidth - 100) {
                            container.style.width = width + 'px';
                        }
                    });
                    
                    document.addEventListener('touchend', function() {
                        isResizing = false;
                    });
                })();
                
                // Enhanced accessibility
                document.addEventListener('keydown', function(e) {
                    if (e.key === 'Enter' || e.key === ' ') {
                        const target = e.target;
                        if (target.classList.contains('issue')) {
                            target.click();
                            e.preventDefault();
                        }
                    }
                });
                
                // Auto-scroll to new issues
                function scrollToLatestIssue() {
                    const issues = document.querySelectorAll('.issue');
                    if (issues.length > 0) {
                        const lastIssue = issues[issues.length - 1];
                        lastIssue.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
                    }
                }
                
                // Initialize
                document.addEventListener('DOMContentLoaded', function() {
                    console.log('Vulnerability panel loaded successfully');
                    
                    // Add tabindex for keyboard navigation
                    const issues = document.querySelectorAll('.issue');
                    issues.forEach((issue, index) => {
                        issue.setAttribute('tabindex', '0');
                        issue.setAttribute('role', 'button');
                        issue.setAttribute('aria-label', 'Open vulnerability in editor');
                    });
                });
            </script>
        </body>
        </html>`;
    }

    private _generateContinuousResultsHtml(): string {
        let html = '';
        
        Array.from(this._results.values()).forEach(result => {
            if (result.issues.length === 0) return;
            
            const fileName = path.basename(result.fileName);
            
            html += `
                <div class="file-section">
                    <div class="file-header">
                        <span class="file-icon">📄</span>
                        ${fileName}
                        <span class="issue-count">(${result.issues.length} issue${result.issues.length !== 1 ? 's' : ''})</span>
                    </div>
            `;
            
            result.issues.forEach(issue => {
                const severityIcon = this._getSeverityIcon(issue.severity);
                const suggestionKey = `${result.fileName}:${issue.lineNumber}`;
                const aiSuggestion = this._aiSuggestions.get(suggestionKey);
                
                html += `
                    <div class="issue severity-${issue.severity}" onclick="openFile('${result.fileName}', ${issue.lineNumber})">
                        <div class="issue-header">
                            <span class="severity-icon">${severityIcon}</span>
                            <span class="line-number">Line ${issue.lineNumber}</span>
                        </div>
                        <div class="description">${issue.description}</div>
                        ${issue.suggestedFix ? `<div class="suggested-fix">💡 ${issue.suggestedFix}</div>` : ''}
                        
                        ${aiSuggestion ? this._generateAISuggestionHtml(aiSuggestion) : this._generateAISuggestionPlaceholder(result.fileName, issue.lineNumber)}
                    </div>
                `;
            });
            
            html += '</div>';
        });
        
        return html;
    }

    private _generateAISuggestionHtml(suggestion: any): string {
        return `
            <div class="ai-suggestion">
                <div class="ai-suggestion-header">
                    <div class="ai-suggestion-title">
                        <span class="bulb">💡</span>
                        AI Suggested Fix
                    </div>
                </div>
                <div class="ai-code">${this._escapeHtml(suggestion.aiGeneratedCode)}</div>
                <div class="ai-actions">
                    <button class="ai-button apply-btn" onclick="applyAISuggestion('${suggestion.id}')">
                        🔧 Apply Fix
                    </button>
                </div>
            </div>
        `;
    }

    private _generateAISuggestionPlaceholder(fileName: string, lineNumber: number): string {
        return `
            <div class="ai-suggestion">
                <div class="ai-suggestion-header">
                    <div class="ai-suggestion-title">
                        <span class="bulb">💡</span>
                        AI Suggestion
                    </div>
                </div>
                <div class="ai-actions">
                    <button class="ai-button generate-btn" onclick="generateAISuggestion('${fileName}', ${lineNumber})">
                        🤖 Generate AI Fix
                    </button>
                </div>
            </div>
        `;
    }

    private _getSeverityIcon(severity: string): string {
        switch (severity) {
            case 'high': return '🔴';
            case 'medium': return '🟡';
            case 'low': return '🔵';
            default: return '⚪';
        }
    }

    private _escapeHtml(text: string): string {
        return text
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&#039;');
    }

    private async openFileAtLine(fileName: string, lineNumber: number): Promise<void> {
        try {
            const document = await vscode.workspace.openTextDocument(fileName);
            const editor = await vscode.window.showTextDocument(document);
            
            const position = new vscode.Position(lineNumber - 1, 0);
            editor.selection = new vscode.Selection(position, position);
            editor.revealRange(new vscode.Range(position, position));
            
            console.log(`📂 Opened ${path.basename(fileName)} at line ${lineNumber}`);
        } catch (error) {
            console.error('❌ Error opening file:', error);
            vscode.window.showErrorMessage(`Could not open file: ${fileName}`);
        }
    }

    private async applyAISuggestion(suggestionId: string): Promise<void> {
        try {
            const { AISuggestionHandler } = await import('../aiSuggestionHandler');
            const aiHandler = new AISuggestionHandler();
            await aiHandler.applySuggestionCommand(suggestionId);
        } catch (error) {
            console.error('❌ Error applying AI suggestion:', error);
            vscode.window.showErrorMessage(`Failed to apply AI suggestion: ${error}`);
        }
    }

    private async generateAISuggestion(fileName: string, lineNumber: number): Promise<void> {
        try {
            const { AISuggestionHandler } = await import('../aiSuggestionHandler');
            const aiHandler = new AISuggestionHandler();
            
            const result = this._results.get(fileName);
            if (result) {
                const issue = result.issues.find(i => i.lineNumber === lineNumber);
                issue.fileName = fileName;
                if (issue) {
                    const suggestions = await aiHandler.generateSuggestions([issue]);
                    if (suggestions.length > 0) {
                        this.addAISuggestions(suggestions);
                    }
                }
            }
        } catch (error) {
            console.error('❌ Error generating AI suggestion:', error);
            vscode.window.showErrorMessage(`Failed to generate AI suggestion: ${error}`);
        }
    }

    public dispose(): void {
        if (VulnerabilityPanel.currentPanel) {
            VulnerabilityPanel.currentPanel.dispose();
            VulnerabilityPanel.currentPanel = null;
        }
        console.log('🛑 Vulnerability panel disposed');
    }
}